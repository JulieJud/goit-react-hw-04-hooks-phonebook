{"version":3,"sources":["components/contacts/ContactsForm/ContactsForm.styled.js","components/contacts/ContactsForm/ContactsForm.jsx","components/contacts/ContactsList/ContactsList.styled.js","components/contacts/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App/App.styled.js","components/App/App.js","index.js"],"names":["Form","styled","form","Label","label","Input","input","Button","button","ContactsForm","onSubmit","useState","name","setName","number","setNumber","nameId","uuidv4","telId","handleInputChange","e","target","value","event","preventDefault","htmlFor","type","pattern","title","required","id","onChange","List","ul","Name","span","Item","li","ContactsList","contacts","onDeleteContacts","map","onClick","Filter","Title","h2","Container","div","App","setContacts","filter","setFilter","useEffect","currentContacts","JSON","parse","localStorage","getItem","setItem","stringify","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","find","alert","newContact","prevState","currentTarget","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d85cc25f.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 95%;\r\n  max-width: 400px;\r\n  padding: 10px;\r\n  border-radius: 2px;\r\n  box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  height: 40px;\r\n  margin-bottom: 6px;\r\n  padding: 5px;\r\n  border: 1px solid #7d847d;\r\n  border-radius: 4px;\r\n  outline: none;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  height: 38px;\r\n  margin-top: 5px;\r\n  border-width: inherit;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  color: white;\r\n  background-color: green;\r\n  cursor: pointer;\r\n`;\r\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Form, Label, Input, Button } from './ContactsForm.styled';\n\nexport default function ContactsForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = uuidv4();\n  const telId = uuidv4();\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor={nameId}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            id={nameId}\n            value={name}\n            onChange={handleInputChange}\n          />\n        </Label>\n        <Label htmlFor={telId}>\n          Telephone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id={telId}\n            value={number}\n            onChange={handleInputChange}\n          />\n        </Label>\n\n        <Button type=\"submit\">Add to contacts</Button>\n      </Form>\n    </div>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 30%;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  text-transform: uppercase;\n  font-size: 12px;\n  cursor: grab;\n\n  background-color: grey;\n  color: white;\n`;\n\nexport const List = styled.ul`\n  padding: 0;\n`;\n\nexport const Name = styled.span`\n  display: block;\n  padding: 0 15px;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  font-size: 14px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  max-width: 400px;\n  height: 45px;\n  padding: 10px;\n  margin-top: 6px;\n  border-radius: 2px;\n  box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.5);\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\r\nimport { Button, List, Name, Item } from './ContactsList.styled';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContacts }) => (\r\n  <List>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <Item key={id}>\r\n        <Name>\r\n          {name} : {number}\r\n        </Name>\r\n        <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default ContactsList;\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  onRemove: PropTypes.func,\r\n};\r\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 95%;\n  max-width: 400px;\n  margin-top: 23px;\n  padding: 10px;\n  border-radius: 1px;\n  color: green;\n\n  box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.5);\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  margin-bottom: 6px;\n  padding: 5px;\n  border: 1px solid #7d847d;\n  border-radius: 4px;\n  outline: none;\n`;\n","import PropTypes from 'prop-types';\r\nimport { Label, Input } from './Filter.styled';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <Label>\r\n      Find contacts by name\r\n      <Input type=\"text\" value={value} onChange={onChange} />\r\n    </Label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h2`\r\n  display: block;\r\n  width: 400px;\r\n  margin: 20px;\r\n  font-family: 'Roboto', sans-serif;\r\n  color: green;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  margin: 10px;\r\n`;\r\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport CotactsForm from '../contacts/ContactsForm/ContactsForm';\nimport ContactsList from '../contacts/ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\nimport { Title, Container } from './App.styled';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const currentContacts = JSON.parse(localStorage.getItem('contacts')) ?? '';\n    currentContacts && setContacts(currentContacts);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addName = (name, number) => {\n    const condition = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (condition) {\n      alert(`${name} is already in contacts!`);\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    setContacts(prevState => [newContact, ...prevState]);\n  };\n\n  const deleteContacts = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <CotactsForm onSubmit={addName} />\n      <Title>Contacts</Title>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactsList\n        contacts={visibleContacts}\n        onDeleteContacts={deleteContacts}\n      />\n    </Container>\n  );\n}\n\n/*export default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts)\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  }\n\n  addName = (name, number) => {\n    const condition = this.state.contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (condition) {\n      alert(`${name} is already in contacts!`);\n      return;\n    }\n\n    const newPerson = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [newPerson, ...contacts],\n    }));\n  };\n\n  deleteContacts = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <Container>\n        <Title>Phonebook</Title>\n        <CotactsForm onSubmit={this.addName} />\n        <Title>Contacts</Title>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <ContactsList\n          contacts={visibleContacts}\n          onDeleteContacts={this.deleteContacts}\n        />\n      </Container>\n    );\n  }\n}\n*/\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}